#include "/Engine/Public/Platform.ush"

RWStructuredBuffer<float3> Positions;
RWStructuredBuffer<float3> Velocities;

int NumParticles;
float boundingSize;
float collisionDamping;


void ResolvecollisionDamping(uint particleIndex)
{
    float3 pos = Positions[particleIndex];
    float3 vel = Velocities[particleIndex];
    
    const float3 boxMin = float3(-boundingSize, -boundingSize, -boundingSize); // 박스의 최소 좌표
    const float3 boxMax = float3(boundingSize, boundingSize, boundingSize); // 박스의 최대 좌표
    
    // X축 충돌 체크
    if (pos.x < boxMin.x)
    {
        pos.x = boxMin.x;
        vel.x = -vel.x * collisionDamping;
    }
    else if (pos.x > boxMax.x)
    {
        pos.x = boxMax.x;
        vel.x = -vel.x * collisionDamping;
    }
    
    // Y축 충돌 체크
    if (pos.y < boxMin.y)
    {
        pos.y = boxMin.y;
        vel.y = -vel.y * collisionDamping;
    }
    else if (pos.y > boxMax.y)
    {
        pos.y = boxMax.y;
        vel.y = -vel.y * collisionDamping;
    }
    
    // Z축 충돌 체크
    if (pos.z < boxMin.z)
    {
        pos.z = boxMin.z;
        vel.z = -vel.z * collisionDamping;
    }
    else if (pos.z > boxMax.z)
    {
        pos.z = boxMax.z;
        vel.z = -vel.z * collisionDamping;
    }
    
    Positions[particleIndex] = pos;
    Velocities[particleIndex] = vel;
}


[numthreads(THREADS_X, THREADS_Y, THREADS_Z)]
void UpdatePositions(
	uint3 DispatchThreadId : SV_DispatchThreadID,
	uint GroupIndex : SV_GroupIndex )
{
    int id = DispatchThreadId.x;
    float deltaTime = 1.0 / 120.0;
    
    if (id >= NumParticles)
        return;

    Positions[id] += Velocities[id] * deltaTime;
    ResolvecollisionDamping(id);
}
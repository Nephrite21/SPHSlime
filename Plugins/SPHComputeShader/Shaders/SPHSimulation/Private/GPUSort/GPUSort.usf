#include "/Engine/Public/Platform.ush"

// 구조체 정의
//struct FEntry
//{
//    uint OriginalIndex;
//    uint Hash;
//    uint Key;
//};

// 버퍼 선언
RWStructuredBuffer<int3> Entries;
int NumEntries;
int GroupWidth;
int GroupHeight;
int StepIndex;

[numthreads(THREADS_X, THREADS_Y, THREADS_Z)]
void SortCS(int3 DTid : SV_DispatchThreadID)
{
    int i = DTid.x;
    
    int hIndex = i & (GroupWidth - 1); // hIndex = i % (GroupWidth-1);
    int indexLeft = hIndex + (GroupHeight + 1) * (i / GroupWidth);
    int rightStepSize = StepIndex == 0 ? GroupHeight - 2 * hIndex : (GroupHeight + 1) / 2;
    int indexRight = indexLeft + rightStepSize;

    if (indexRight >= NumEntries) 
        return;

    // 정렬 로직
    if (Entries[indexLeft].z > Entries[indexRight].z) //[2] = key
    {
        int3 temp = Entries[indexLeft];
        Entries[indexLeft] = Entries[indexRight];
        Entries[indexRight] = temp;
    }
}

RWStructuredBuffer<int> Offsets;

[numthreads(THREADS_X, THREADS_Y, THREADS_Z)]
void CalculateOffsetsCS(int3 DispatchThreadId : SV_DispatchThreadID)
{
    int id = DispatchThreadId.x;
    if (id >= NumEntries)
        return;
    
    int null = NumEntries;
    
    int key = Entries[id].z;
    // 현재 엔트리의 해시값과 이전 엔트리의 해시값을 비교
    int keyPrev = id == 0 ? null : Entries[id - 1].z;
    
    // 해시값이 바뀌는 지점이나 첫 번째 엔트리인 경우 오프셋 설정
    if (key != keyPrev)
    {
        Offsets[key] = id;
    }
}